---
services:
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_LISTEN__HTTP: "[::]:${AUTHENTIK_SERVER_HTTP_PORT:-9000}"
      AUTHENTIK_LISTEN__HTTPS: "[::]:${AUTHENTIK_SERVER_HTTPS_PORT:-9443}"
      AUTHENTIK_REDIS__HOST: cache
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?postgres password required}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED:-false}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key is required}
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST:-localhost}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM:-authentik@localhost}
    expose:
      - "${AUTHENTIK_SERVER_HTTP_PORT:-9000}"
      - "${AUTHENTIK_SERVER_HTTPS_PORT:-9443}"
      - "${AUTHENTIK_SERVER_METRICS_PORT:-9300}"
    networks:
      - default
      - proxy
    depends_on:
      - db
      - cache
    labels:
      traefik.enable: true
      traefik.http.routers.authentik.rule: Host(`auth.home.joe.nyland.io`)
      traefik.http.routers.authentik.middlewares: trusted-ipallowlist
      traefik.http.middlewares.authentik.forwardauth.address: http://authentik-server:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: >
        X-authentik-username,
        X-authentik-groups,
        X-authentik-entitlements,
        X-authentik-email,
        X-authentik-name,
        X-authentik-uid,
        X-authentik-jwt,
        X-authentik-meta-jwks,
        X-authentik-meta-outpost,
        X-authentik-meta-provider,
        X-authentik-meta-app,
        X-authentik-meta-version
    volumes:
      - /containers/authentik/media:/media
      - /containers/authentik/templates:/templates
  db:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?postgres password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    volumes:
      - /containers/authentik/db:/var/lib/postgresql/data
  cache:
    image: docker.io/library/redis:alpine
    container_name: authentik-cache
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /containers/authentik/cache:/data
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: cache
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?postgres password required}
      AUTHENTIK_ERROR_REPORTING__ENABLED: ${AUTHENTIK_ERROR_REPORTING__ENABLED:-false}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key is required}
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST:-localhost}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM:-authentik@localhost}
    depends_on:
      - db
      - cache
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Allows management of outpost containers
      - /containers/authentik/media:/media
      - /containers/authentik/certs:/certs
      - /containers/authentik/templates:/templates

networks:
  default:
    enable_ipv6: true
  proxy:
    external: true
